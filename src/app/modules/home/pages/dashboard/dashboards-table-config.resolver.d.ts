import { ActivatedRouteSnapshot, Resolve, Router } from '@angular/router';
import { CellActionDescriptor, EntityTableColumn, EntityTableConfig, GroupActionDescriptor, HeaderActionDescriptor } from '@home/models/entity/entities-table-config.models';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { EntityAction } from '@home/models/entity/entity-component.models';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { CustomerService } from '@core/http/customer.service';
import { MatDialog } from '@angular/material/dialog';
import { DialogService } from '@core/services/dialog.service';
import { Dashboard, DashboardInfo } from '@app/shared/models/dashboard.models';
import { DashboardService } from '@app/core/http/dashboard.service';
import { ManageDashboardCustomersActionType } from './manage-dashboard-customers-dialog.component';
import { ImportExportService } from '@home/components/import-export/import-export.service';
import { EdgeService } from '@core/http/edge.service';
import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';
import * as i0 from "@angular/core";
export declare class DashboardsTableConfigResolver implements Resolve<EntityTableConfig<DashboardInfo | Dashboard>> {
    private store;
    private dashboardService;
    private customerService;
    private edgeService;
    private dialogService;
    private homeDialogs;
    private importExport;
    private translate;
    private datePipe;
    private router;
    private dialog;
    private readonly config;
    constructor(store: Store<AppState>, dashboardService: DashboardService, customerService: CustomerService, edgeService: EdgeService, dialogService: DialogService, homeDialogs: HomeDialogsService, importExport: ImportExportService, translate: TranslateService, datePipe: DatePipe, router: Router, dialog: MatDialog);
    resolve(route: ActivatedRouteSnapshot): Observable<EntityTableConfig<DashboardInfo | Dashboard>>;
    configureColumns(dashboardScope: string): Array<EntityTableColumn<DashboardInfo>>;
    configureEntityFunctions(dashboardScope: string): void;
    configureCellActions(dashboardScope: string): Array<CellActionDescriptor<DashboardInfo>>;
    configureGroupActions(dashboardScope: string): Array<GroupActionDescriptor<DashboardInfo>>;
    configureAddActions(dashboardScope: string): Array<HeaderActionDescriptor>;
    openDashboard($event: Event, dashboard: DashboardInfo): void;
    importDashboard(_$event: Event): void;
    exportDashboard($event: Event, dashboard: DashboardInfo): void;
    addDashboardsToCustomer($event: Event): void;
    makePublic($event: Event, dashboard: DashboardInfo): void;
    makePrivate($event: Event, dashboard: DashboardInfo): void;
    manageAssignedCustomers($event: Event, dashboard: DashboardInfo): void;
    assignDashboardsToCustomers($event: Event, dashboardIds: Array<string>): void;
    unassignDashboardsFromCustomers($event: Event, dashboardIds: Array<string>): void;
    showManageAssignedCustomersDialog($event: Event, dashboardIds: Array<string>, actionType: ManageDashboardCustomersActionType, assignedCustomersIds?: Array<string>): void;
    unassignFromCustomer($event: Event, dashboard: DashboardInfo, customerId: string): void;
    unassignDashboardsFromCustomer($event: Event, dashboardIds: Array<string>, customerId: string): void;
    onDashboardAction(action: EntityAction<DashboardInfo>): boolean;
    addDashboardsToEdge($event: Event): void;
    unassignFromEdge($event: Event, dashboard: DashboardInfo): void;
    unassignDashboardsFromEdge($event: Event, dashboards: Array<DashboardInfo>): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardsTableConfigResolver, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DashboardsTableConfigResolver>;
}
